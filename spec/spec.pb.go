// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: spec.proto

/*
	Package spec is a generated protocol buffer package.

	It is generated from these files:
		spec.proto

	It has these top-level messages:
		WeatherStoreKey
		Unit
		Deg
		Speed
		Percent
		WeatherStoreValue
		WeatherResponseItem
		QueryRequest
		QueryResponse
*/
package spec

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type WeatherStoreKey struct {
	Lat       float64 `protobuf:"fixed64,1,opt,name=lat,proto3" json:"lat,omitempty"`
	Lng       float64 `protobuf:"fixed64,2,opt,name=lng,proto3" json:"lng,omitempty"`
	Timestamp uint32  `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (m *WeatherStoreKey) Reset()                    { *m = WeatherStoreKey{} }
func (m *WeatherStoreKey) String() string            { return proto.CompactTextString(m) }
func (*WeatherStoreKey) ProtoMessage()               {}
func (*WeatherStoreKey) Descriptor() ([]byte, []int) { return fileDescriptorSpec, []int{0} }

func (m *WeatherStoreKey) GetLat() float64 {
	if m != nil {
		return m.Lat
	}
	return 0
}

func (m *WeatherStoreKey) GetLng() float64 {
	if m != nil {
		return m.Lng
	}
	return 0
}

func (m *WeatherStoreKey) GetTimestamp() uint32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type Unit struct {
	Unit  string  `protobuf:"bytes,1,opt,name=unit,proto3" json:"unit,omitempty"`
	Value float64 `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"`
	Id    string  `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *Unit) Reset()                    { *m = Unit{} }
func (m *Unit) String() string            { return proto.CompactTextString(m) }
func (*Unit) ProtoMessage()               {}
func (*Unit) Descriptor() ([]byte, []int) { return fileDescriptorSpec, []int{1} }

func (m *Unit) GetUnit() string {
	if m != nil {
		return m.Unit
	}
	return ""
}

func (m *Unit) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *Unit) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type Deg struct {
	Name string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Deg  float64 `protobuf:"fixed64,2,opt,name=deg,proto3" json:"deg,omitempty"`
	Id   string  `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *Deg) Reset()                    { *m = Deg{} }
func (m *Deg) String() string            { return proto.CompactTextString(m) }
func (*Deg) ProtoMessage()               {}
func (*Deg) Descriptor() ([]byte, []int) { return fileDescriptorSpec, []int{2} }

func (m *Deg) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Deg) GetDeg() float64 {
	if m != nil {
		return m.Deg
	}
	return 0
}

func (m *Deg) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type Speed struct {
	Name     string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Beaufort string  `protobuf:"bytes,2,opt,name=beaufort,proto3" json:"beaufort,omitempty"`
	Mps      float64 `protobuf:"fixed64,3,opt,name=mps,proto3" json:"mps,omitempty"`
	Id       string  `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *Speed) Reset()                    { *m = Speed{} }
func (m *Speed) String() string            { return proto.CompactTextString(m) }
func (*Speed) ProtoMessage()               {}
func (*Speed) Descriptor() ([]byte, []int) { return fileDescriptorSpec, []int{3} }

func (m *Speed) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Speed) GetBeaufort() string {
	if m != nil {
		return m.Beaufort
	}
	return ""
}

func (m *Speed) GetMps() float64 {
	if m != nil {
		return m.Mps
	}
	return 0
}

func (m *Speed) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type Percent struct {
	Percent float64 `protobuf:"fixed64,1,opt,name=percent,proto3" json:"percent,omitempty"`
	Id      string  `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *Percent) Reset()                    { *m = Percent{} }
func (m *Percent) String() string            { return proto.CompactTextString(m) }
func (*Percent) ProtoMessage()               {}
func (*Percent) Descriptor() ([]byte, []int) { return fileDescriptorSpec, []int{4} }

func (m *Percent) GetPercent() float64 {
	if m != nil {
		return m.Percent
	}
	return 0
}

func (m *Percent) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type WeatherStoreValue struct {
	From                   uint32   `protobuf:"varint,1,opt,name=from,proto3" json:"from,omitempty"`
	To                     uint32   `protobuf:"varint,2,opt,name=to,proto3" json:"to,omitempty"`
	Lat                    float64  `protobuf:"fixed64,3,opt,name=lat,proto3" json:"lat,omitempty"`
	Lng                    float64  `protobuf:"fixed64,4,opt,name=lng,proto3" json:"lng,omitempty"`
	Altitude               float64  `protobuf:"fixed64,5,opt,name=altitude,proto3" json:"altitude,omitempty"`
	Fog                    *Percent `protobuf:"bytes,6,opt,name=fog" json:"fog,omitempty"`
	Pressure               *Unit    `protobuf:"bytes,7,opt,name=pressure" json:"pressure,omitempty"`
	Cloudiness             *Percent `protobuf:"bytes,8,opt,name=cloudiness" json:"cloudiness,omitempty"`
	WindDirection          *Deg     `protobuf:"bytes,9,opt,name=windDirection" json:"windDirection,omitempty"`
	DewpointTemperature    *Unit    `protobuf:"bytes,10,opt,name=dewpointTemperature" json:"dewpointTemperature,omitempty"`
	WindGust               *Speed   `protobuf:"bytes,11,opt,name=windGust" json:"windGust,omitempty"`
	Humidity               *Unit    `protobuf:"bytes,12,opt,name=humidity" json:"humidity,omitempty"`
	AreaMaxWindSpeed       *Speed   `protobuf:"bytes,13,opt,name=areaMaxWindSpeed" json:"areaMaxWindSpeed,omitempty"`
	WindSpeed              *Speed   `protobuf:"bytes,14,opt,name=windSpeed" json:"windSpeed,omitempty"`
	Temperature            *Unit    `protobuf:"bytes,15,opt,name=temperature" json:"temperature,omitempty"`
	LowClouds              *Percent `protobuf:"bytes,16,opt,name=lowClouds" json:"lowClouds,omitempty"`
	MediumClouds           *Percent `protobuf:"bytes,17,opt,name=mediumClouds" json:"mediumClouds,omitempty"`
	HighClouds             *Percent `protobuf:"bytes,18,opt,name=highClouds" json:"highClouds,omitempty"`
	TemperatureProbability *Unit    `protobuf:"bytes,19,opt,name=temperatureProbability" json:"temperatureProbability,omitempty"`
	WindProbability        *Unit    `protobuf:"bytes,20,opt,name=windProbability" json:"windProbability,omitempty"`
	UpdatedTimestamp       uint32   `protobuf:"varint,22,opt,name=updatedTimestamp,proto3" json:"updatedTimestamp,omitempty"`
}

func (m *WeatherStoreValue) Reset()                    { *m = WeatherStoreValue{} }
func (m *WeatherStoreValue) String() string            { return proto.CompactTextString(m) }
func (*WeatherStoreValue) ProtoMessage()               {}
func (*WeatherStoreValue) Descriptor() ([]byte, []int) { return fileDescriptorSpec, []int{5} }

func (m *WeatherStoreValue) GetFrom() uint32 {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *WeatherStoreValue) GetTo() uint32 {
	if m != nil {
		return m.To
	}
	return 0
}

func (m *WeatherStoreValue) GetLat() float64 {
	if m != nil {
		return m.Lat
	}
	return 0
}

func (m *WeatherStoreValue) GetLng() float64 {
	if m != nil {
		return m.Lng
	}
	return 0
}

func (m *WeatherStoreValue) GetAltitude() float64 {
	if m != nil {
		return m.Altitude
	}
	return 0
}

func (m *WeatherStoreValue) GetFog() *Percent {
	if m != nil {
		return m.Fog
	}
	return nil
}

func (m *WeatherStoreValue) GetPressure() *Unit {
	if m != nil {
		return m.Pressure
	}
	return nil
}

func (m *WeatherStoreValue) GetCloudiness() *Percent {
	if m != nil {
		return m.Cloudiness
	}
	return nil
}

func (m *WeatherStoreValue) GetWindDirection() *Deg {
	if m != nil {
		return m.WindDirection
	}
	return nil
}

func (m *WeatherStoreValue) GetDewpointTemperature() *Unit {
	if m != nil {
		return m.DewpointTemperature
	}
	return nil
}

func (m *WeatherStoreValue) GetWindGust() *Speed {
	if m != nil {
		return m.WindGust
	}
	return nil
}

func (m *WeatherStoreValue) GetHumidity() *Unit {
	if m != nil {
		return m.Humidity
	}
	return nil
}

func (m *WeatherStoreValue) GetAreaMaxWindSpeed() *Speed {
	if m != nil {
		return m.AreaMaxWindSpeed
	}
	return nil
}

func (m *WeatherStoreValue) GetWindSpeed() *Speed {
	if m != nil {
		return m.WindSpeed
	}
	return nil
}

func (m *WeatherStoreValue) GetTemperature() *Unit {
	if m != nil {
		return m.Temperature
	}
	return nil
}

func (m *WeatherStoreValue) GetLowClouds() *Percent {
	if m != nil {
		return m.LowClouds
	}
	return nil
}

func (m *WeatherStoreValue) GetMediumClouds() *Percent {
	if m != nil {
		return m.MediumClouds
	}
	return nil
}

func (m *WeatherStoreValue) GetHighClouds() *Percent {
	if m != nil {
		return m.HighClouds
	}
	return nil
}

func (m *WeatherStoreValue) GetTemperatureProbability() *Unit {
	if m != nil {
		return m.TemperatureProbability
	}
	return nil
}

func (m *WeatherStoreValue) GetWindProbability() *Unit {
	if m != nil {
		return m.WindProbability
	}
	return nil
}

func (m *WeatherStoreValue) GetUpdatedTimestamp() uint32 {
	if m != nil {
		return m.UpdatedTimestamp
	}
	return 0
}

type WeatherResponseItem struct {
	Location *WeatherStoreKey   `protobuf:"bytes,1,opt,name=location" json:"location,omitempty"`
	Weather  *WeatherStoreValue `protobuf:"bytes,2,opt,name=weather" json:"weather,omitempty"`
}

func (m *WeatherResponseItem) Reset()                    { *m = WeatherResponseItem{} }
func (m *WeatherResponseItem) String() string            { return proto.CompactTextString(m) }
func (*WeatherResponseItem) ProtoMessage()               {}
func (*WeatherResponseItem) Descriptor() ([]byte, []int) { return fileDescriptorSpec, []int{6} }

func (m *WeatherResponseItem) GetLocation() *WeatherStoreKey {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *WeatherResponseItem) GetWeather() *WeatherStoreValue {
	if m != nil {
		return m.Weather
	}
	return nil
}

type QueryRequest struct {
	Locations []*WeatherStoreKey `protobuf:"bytes,1,rep,name=locations" json:"locations,omitempty"`
}

func (m *QueryRequest) Reset()                    { *m = QueryRequest{} }
func (m *QueryRequest) String() string            { return proto.CompactTextString(m) }
func (*QueryRequest) ProtoMessage()               {}
func (*QueryRequest) Descriptor() ([]byte, []int) { return fileDescriptorSpec, []int{7} }

func (m *QueryRequest) GetLocations() []*WeatherStoreKey {
	if m != nil {
		return m.Locations
	}
	return nil
}

type QueryResponse struct {
	Locations []*WeatherResponseItem `protobuf:"bytes,2,rep,name=locations" json:"locations,omitempty"`
	License   string                 `protobuf:"bytes,1,opt,name=license,proto3" json:"license,omitempty"`
}

func (m *QueryResponse) Reset()                    { *m = QueryResponse{} }
func (m *QueryResponse) String() string            { return proto.CompactTextString(m) }
func (*QueryResponse) ProtoMessage()               {}
func (*QueryResponse) Descriptor() ([]byte, []int) { return fileDescriptorSpec, []int{8} }

func (m *QueryResponse) GetLocations() []*WeatherResponseItem {
	if m != nil {
		return m.Locations
	}
	return nil
}

func (m *QueryResponse) GetLicense() string {
	if m != nil {
		return m.License
	}
	return ""
}

func init() {
	proto.RegisterType((*WeatherStoreKey)(nil), "spec.WeatherStoreKey")
	proto.RegisterType((*Unit)(nil), "spec.Unit")
	proto.RegisterType((*Deg)(nil), "spec.Deg")
	proto.RegisterType((*Speed)(nil), "spec.Speed")
	proto.RegisterType((*Percent)(nil), "spec.Percent")
	proto.RegisterType((*WeatherStoreValue)(nil), "spec.WeatherStoreValue")
	proto.RegisterType((*WeatherResponseItem)(nil), "spec.WeatherResponseItem")
	proto.RegisterType((*QueryRequest)(nil), "spec.QueryRequest")
	proto.RegisterType((*QueryResponse)(nil), "spec.QueryResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Weather service

type WeatherClient interface {
	RpcQuery(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error)
}

type weatherClient struct {
	cc *grpc.ClientConn
}

func NewWeatherClient(cc *grpc.ClientConn) WeatherClient {
	return &weatherClient{cc}
}

func (c *weatherClient) RpcQuery(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error) {
	out := new(QueryResponse)
	err := grpc.Invoke(ctx, "/spec.Weather/RpcQuery", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Weather service

type WeatherServer interface {
	RpcQuery(context.Context, *QueryRequest) (*QueryResponse, error)
}

func RegisterWeatherServer(s *grpc.Server, srv WeatherServer) {
	s.RegisterService(&_Weather_serviceDesc, srv)
}

func _Weather_RpcQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeatherServer).RpcQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spec.Weather/RpcQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeatherServer).RpcQuery(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Weather_serviceDesc = grpc.ServiceDesc{
	ServiceName: "spec.Weather",
	HandlerType: (*WeatherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RpcQuery",
			Handler:    _Weather_RpcQuery_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spec.proto",
}

func (m *WeatherStoreKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WeatherStoreKey) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Lat != 0 {
		dAtA[i] = 0x9
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Lat))))
		i += 8
	}
	if m.Lng != 0 {
		dAtA[i] = 0x11
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Lng))))
		i += 8
	}
	if m.Timestamp != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSpec(dAtA, i, uint64(m.Timestamp))
	}
	return i, nil
}

func (m *Unit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Unit) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Unit) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSpec(dAtA, i, uint64(len(m.Unit)))
		i += copy(dAtA[i:], m.Unit)
	}
	if m.Value != 0 {
		dAtA[i] = 0x11
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Value))))
		i += 8
	}
	if len(m.Id) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSpec(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *Deg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Deg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSpec(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Deg != 0 {
		dAtA[i] = 0x11
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Deg))))
		i += 8
	}
	if len(m.Id) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSpec(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *Speed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Speed) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSpec(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Beaufort) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSpec(dAtA, i, uint64(len(m.Beaufort)))
		i += copy(dAtA[i:], m.Beaufort)
	}
	if m.Mps != 0 {
		dAtA[i] = 0x19
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Mps))))
		i += 8
	}
	if len(m.Id) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSpec(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *Percent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Percent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Percent != 0 {
		dAtA[i] = 0x9
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Percent))))
		i += 8
	}
	if len(m.Id) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSpec(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *WeatherStoreValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WeatherStoreValue) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.From != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSpec(dAtA, i, uint64(m.From))
	}
	if m.To != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSpec(dAtA, i, uint64(m.To))
	}
	if m.Lat != 0 {
		dAtA[i] = 0x19
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Lat))))
		i += 8
	}
	if m.Lng != 0 {
		dAtA[i] = 0x21
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Lng))))
		i += 8
	}
	if m.Altitude != 0 {
		dAtA[i] = 0x29
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Altitude))))
		i += 8
	}
	if m.Fog != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintSpec(dAtA, i, uint64(m.Fog.Size()))
		n1, err := m.Fog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Pressure != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintSpec(dAtA, i, uint64(m.Pressure.Size()))
		n2, err := m.Pressure.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Cloudiness != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintSpec(dAtA, i, uint64(m.Cloudiness.Size()))
		n3, err := m.Cloudiness.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.WindDirection != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintSpec(dAtA, i, uint64(m.WindDirection.Size()))
		n4, err := m.WindDirection.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.DewpointTemperature != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintSpec(dAtA, i, uint64(m.DewpointTemperature.Size()))
		n5, err := m.DewpointTemperature.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.WindGust != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintSpec(dAtA, i, uint64(m.WindGust.Size()))
		n6, err := m.WindGust.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.Humidity != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintSpec(dAtA, i, uint64(m.Humidity.Size()))
		n7, err := m.Humidity.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.AreaMaxWindSpeed != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintSpec(dAtA, i, uint64(m.AreaMaxWindSpeed.Size()))
		n8, err := m.AreaMaxWindSpeed.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.WindSpeed != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintSpec(dAtA, i, uint64(m.WindSpeed.Size()))
		n9, err := m.WindSpeed.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.Temperature != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintSpec(dAtA, i, uint64(m.Temperature.Size()))
		n10, err := m.Temperature.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.LowClouds != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSpec(dAtA, i, uint64(m.LowClouds.Size()))
		n11, err := m.LowClouds.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.MediumClouds != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSpec(dAtA, i, uint64(m.MediumClouds.Size()))
		n12, err := m.MediumClouds.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if m.HighClouds != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSpec(dAtA, i, uint64(m.HighClouds.Size()))
		n13, err := m.HighClouds.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if m.TemperatureProbability != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSpec(dAtA, i, uint64(m.TemperatureProbability.Size()))
		n14, err := m.TemperatureProbability.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	if m.WindProbability != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSpec(dAtA, i, uint64(m.WindProbability.Size()))
		n15, err := m.WindProbability.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	if m.UpdatedTimestamp != 0 {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSpec(dAtA, i, uint64(m.UpdatedTimestamp))
	}
	return i, nil
}

func (m *WeatherResponseItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WeatherResponseItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Location != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSpec(dAtA, i, uint64(m.Location.Size()))
		n16, err := m.Location.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	if m.Weather != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSpec(dAtA, i, uint64(m.Weather.Size()))
		n17, err := m.Weather.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	return i, nil
}

func (m *QueryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Locations) > 0 {
		for _, msg := range m.Locations {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSpec(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *QueryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.License) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSpec(dAtA, i, uint64(len(m.License)))
		i += copy(dAtA[i:], m.License)
	}
	if len(m.Locations) > 0 {
		for _, msg := range m.Locations {
			dAtA[i] = 0x12
			i++
			i = encodeVarintSpec(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintSpec(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *WeatherStoreKey) Size() (n int) {
	var l int
	_ = l
	if m.Lat != 0 {
		n += 9
	}
	if m.Lng != 0 {
		n += 9
	}
	if m.Timestamp != 0 {
		n += 1 + sovSpec(uint64(m.Timestamp))
	}
	return n
}

func (m *Unit) Size() (n int) {
	var l int
	_ = l
	l = len(m.Unit)
	if l > 0 {
		n += 1 + l + sovSpec(uint64(l))
	}
	if m.Value != 0 {
		n += 9
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSpec(uint64(l))
	}
	return n
}

func (m *Deg) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSpec(uint64(l))
	}
	if m.Deg != 0 {
		n += 9
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSpec(uint64(l))
	}
	return n
}

func (m *Speed) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSpec(uint64(l))
	}
	l = len(m.Beaufort)
	if l > 0 {
		n += 1 + l + sovSpec(uint64(l))
	}
	if m.Mps != 0 {
		n += 9
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSpec(uint64(l))
	}
	return n
}

func (m *Percent) Size() (n int) {
	var l int
	_ = l
	if m.Percent != 0 {
		n += 9
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSpec(uint64(l))
	}
	return n
}

func (m *WeatherStoreValue) Size() (n int) {
	var l int
	_ = l
	if m.From != 0 {
		n += 1 + sovSpec(uint64(m.From))
	}
	if m.To != 0 {
		n += 1 + sovSpec(uint64(m.To))
	}
	if m.Lat != 0 {
		n += 9
	}
	if m.Lng != 0 {
		n += 9
	}
	if m.Altitude != 0 {
		n += 9
	}
	if m.Fog != nil {
		l = m.Fog.Size()
		n += 1 + l + sovSpec(uint64(l))
	}
	if m.Pressure != nil {
		l = m.Pressure.Size()
		n += 1 + l + sovSpec(uint64(l))
	}
	if m.Cloudiness != nil {
		l = m.Cloudiness.Size()
		n += 1 + l + sovSpec(uint64(l))
	}
	if m.WindDirection != nil {
		l = m.WindDirection.Size()
		n += 1 + l + sovSpec(uint64(l))
	}
	if m.DewpointTemperature != nil {
		l = m.DewpointTemperature.Size()
		n += 1 + l + sovSpec(uint64(l))
	}
	if m.WindGust != nil {
		l = m.WindGust.Size()
		n += 1 + l + sovSpec(uint64(l))
	}
	if m.Humidity != nil {
		l = m.Humidity.Size()
		n += 1 + l + sovSpec(uint64(l))
	}
	if m.AreaMaxWindSpeed != nil {
		l = m.AreaMaxWindSpeed.Size()
		n += 1 + l + sovSpec(uint64(l))
	}
	if m.WindSpeed != nil {
		l = m.WindSpeed.Size()
		n += 1 + l + sovSpec(uint64(l))
	}
	if m.Temperature != nil {
		l = m.Temperature.Size()
		n += 1 + l + sovSpec(uint64(l))
	}
	if m.LowClouds != nil {
		l = m.LowClouds.Size()
		n += 2 + l + sovSpec(uint64(l))
	}
	if m.MediumClouds != nil {
		l = m.MediumClouds.Size()
		n += 2 + l + sovSpec(uint64(l))
	}
	if m.HighClouds != nil {
		l = m.HighClouds.Size()
		n += 2 + l + sovSpec(uint64(l))
	}
	if m.TemperatureProbability != nil {
		l = m.TemperatureProbability.Size()
		n += 2 + l + sovSpec(uint64(l))
	}
	if m.WindProbability != nil {
		l = m.WindProbability.Size()
		n += 2 + l + sovSpec(uint64(l))
	}
	if m.UpdatedTimestamp != 0 {
		n += 2 + sovSpec(uint64(m.UpdatedTimestamp))
	}
	return n
}

func (m *WeatherResponseItem) Size() (n int) {
	var l int
	_ = l
	if m.Location != nil {
		l = m.Location.Size()
		n += 1 + l + sovSpec(uint64(l))
	}
	if m.Weather != nil {
		l = m.Weather.Size()
		n += 1 + l + sovSpec(uint64(l))
	}
	return n
}

func (m *QueryRequest) Size() (n int) {
	var l int
	_ = l
	if len(m.Locations) > 0 {
		for _, e := range m.Locations {
			l = e.Size()
			n += 1 + l + sovSpec(uint64(l))
		}
	}
	return n
}

func (m *QueryResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.License)
	if l > 0 {
		n += 1 + l + sovSpec(uint64(l))
	}
	if len(m.Locations) > 0 {
		for _, e := range m.Locations {
			l = e.Size()
			n += 1 + l + sovSpec(uint64(l))
		}
	}
	return n
}

func sovSpec(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSpec(x uint64) (n int) {
	return sovSpec(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *WeatherStoreKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WeatherStoreKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WeatherStoreKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lat", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Lat = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lng", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Lng = float64(math.Float64frombits(v))
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSpec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Unit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Unit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Unit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Unit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Value = float64(math.Float64frombits(v))
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Deg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Deg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Deg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deg", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Deg = float64(math.Float64frombits(v))
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Speed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Speed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Speed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Beaufort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Beaufort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mps", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Mps = float64(math.Float64frombits(v))
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Percent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Percent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Percent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Percent", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Percent = float64(math.Float64frombits(v))
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WeatherStoreValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WeatherStoreValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WeatherStoreValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			m.From = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.From |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			m.To = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.To |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lat", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Lat = float64(math.Float64frombits(v))
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lng", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Lng = float64(math.Float64frombits(v))
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Altitude", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Altitude = float64(math.Float64frombits(v))
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fog == nil {
				m.Fog = &Percent{}
			}
			if err := m.Fog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pressure", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pressure == nil {
				m.Pressure = &Unit{}
			}
			if err := m.Pressure.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cloudiness", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cloudiness == nil {
				m.Cloudiness = &Percent{}
			}
			if err := m.Cloudiness.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WindDirection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WindDirection == nil {
				m.WindDirection = &Deg{}
			}
			if err := m.WindDirection.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DewpointTemperature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DewpointTemperature == nil {
				m.DewpointTemperature = &Unit{}
			}
			if err := m.DewpointTemperature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WindGust", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WindGust == nil {
				m.WindGust = &Speed{}
			}
			if err := m.WindGust.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Humidity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Humidity == nil {
				m.Humidity = &Unit{}
			}
			if err := m.Humidity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaMaxWindSpeed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AreaMaxWindSpeed == nil {
				m.AreaMaxWindSpeed = &Speed{}
			}
			if err := m.AreaMaxWindSpeed.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WindSpeed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WindSpeed == nil {
				m.WindSpeed = &Speed{}
			}
			if err := m.WindSpeed.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Temperature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Temperature == nil {
				m.Temperature = &Unit{}
			}
			if err := m.Temperature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LowClouds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LowClouds == nil {
				m.LowClouds = &Percent{}
			}
			if err := m.LowClouds.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MediumClouds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MediumClouds == nil {
				m.MediumClouds = &Percent{}
			}
			if err := m.MediumClouds.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HighClouds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HighClouds == nil {
				m.HighClouds = &Percent{}
			}
			if err := m.HighClouds.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TemperatureProbability", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TemperatureProbability == nil {
				m.TemperatureProbability = &Unit{}
			}
			if err := m.TemperatureProbability.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WindProbability", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WindProbability == nil {
				m.WindProbability = &Unit{}
			}
			if err := m.WindProbability.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedTimestamp", wireType)
			}
			m.UpdatedTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedTimestamp |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSpec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WeatherResponseItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WeatherResponseItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WeatherResponseItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Location == nil {
				m.Location = &WeatherStoreKey{}
			}
			if err := m.Location.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weather", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Weather == nil {
				m.Weather = &WeatherStoreValue{}
			}
			if err := m.Weather.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Locations = append(m.Locations, &WeatherStoreKey{})
			if err := m.Locations[len(m.Locations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field License", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.License = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Locations = append(m.Locations, &WeatherResponseItem{})
			if err := m.Locations[len(m.Locations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSpec(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSpec
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSpec
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSpec
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSpec(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSpec = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSpec   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("spec.proto", fileDescriptorSpec) }

var fileDescriptorSpec = []byte{
	// 771 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x55, 0xcd, 0x6e, 0xdb, 0x46,
	0x10, 0x2e, 0x25, 0xd9, 0x12, 0x47, 0x96, 0x2d, 0xaf, 0x5c, 0x97, 0x15, 0x0c, 0x55, 0xe0, 0xa1,
	0x75, 0xdd, 0xd6, 0x82, 0xe4, 0x02, 0x06, 0xda, 0x1e, 0x0a, 0xdb, 0x40, 0x61, 0x14, 0x05, 0xdc,
	0xb5, 0x13, 0x23, 0xc7, 0x95, 0x38, 0xa6, 0x16, 0x20, 0xb9, 0x34, 0xb9, 0xb4, 0x62, 0xe4, 0x96,
	0x57, 0xc8, 0x25, 0x8f, 0x94, 0x63, 0x80, 0xbc, 0x40, 0xe0, 0xe4, 0x19, 0x72, 0x0e, 0x76, 0x49,
	0x51, 0x94, 0x29, 0xdf, 0x66, 0x67, 0xbe, 0xef, 0xdb, 0xf9, 0xe1, 0x0e, 0x01, 0xe2, 0x10, 0x27,
	0x87, 0x61, 0x24, 0xa4, 0x20, 0x35, 0x65, 0x77, 0xf7, 0x5c, 0x21, 0x5c, 0x0f, 0x07, 0x2c, 0xe4,
	0x03, 0x16, 0x04, 0x42, 0x32, 0xc9, 0x45, 0x10, 0xa7, 0x18, 0xfb, 0x12, 0xb6, 0xae, 0x91, 0xc9,
	0x29, 0x46, 0x97, 0x52, 0x44, 0xf8, 0x2f, 0xde, 0x93, 0x36, 0x54, 0x3d, 0x26, 0x2d, 0xa3, 0x6f,
	0xec, 0x1b, 0x54, 0x99, 0xda, 0x13, 0xb8, 0x56, 0x25, 0xf3, 0x04, 0x2e, 0xd9, 0x03, 0x53, 0x72,
	0x1f, 0x63, 0xc9, 0xfc, 0xd0, 0xaa, 0xf6, 0x8d, 0xfd, 0x16, 0x5d, 0x38, 0xec, 0xbf, 0xa1, 0xf6,
	0x2c, 0xe0, 0x92, 0x10, 0xa8, 0x25, 0x01, 0x4f, 0xa5, 0x4c, 0xaa, 0x6d, 0xb2, 0x03, 0x6b, 0x77,
	0xcc, 0x4b, 0x30, 0x53, 0x4b, 0x0f, 0x64, 0x13, 0x2a, 0xdc, 0xd1, 0x42, 0x26, 0xad, 0x70, 0xc7,
	0xfe, 0x13, 0xaa, 0x67, 0xe8, 0x2a, 0x81, 0x80, 0xf9, 0x38, 0x17, 0x50, 0xb6, 0x4a, 0xc6, 0xc1,
	0x3c, 0x19, 0x07, 0xdd, 0x12, 0xf9, 0x05, 0xac, 0x5d, 0x86, 0x88, 0xce, 0x4a, 0x7a, 0x17, 0x1a,
	0x63, 0x64, 0xc9, 0x8d, 0x88, 0xa4, 0xd6, 0x30, 0x69, 0x7e, 0x56, 0xd2, 0x7e, 0x18, 0x6b, 0x25,
	0x83, 0x2a, 0x33, 0x93, 0xae, 0xe5, 0xd2, 0x47, 0x50, 0xbf, 0xc0, 0x68, 0x82, 0x81, 0x24, 0x16,
	0xd4, 0xc3, 0xd4, 0xcc, 0x5a, 0x35, 0x3f, 0x66, 0xa4, 0x4a, 0x4e, 0xfa, 0xb2, 0x0e, 0xdb, 0xc5,
	0x26, 0x3f, 0xd7, 0x25, 0x13, 0xa8, 0xdd, 0x44, 0xc2, 0xd7, 0xe4, 0x16, 0xd5, 0xb6, 0x62, 0x4a,
	0xa1, 0x99, 0x2d, 0x5a, 0x91, 0x62, 0x3e, 0x8a, 0x6a, 0x69, 0x14, 0xb5, 0xc5, 0x28, 0xba, 0xd0,
	0x60, 0x9e, 0xe4, 0x32, 0x71, 0xd0, 0x5a, 0xd3, 0xee, 0xfc, 0x4c, 0x7e, 0x80, 0xea, 0x8d, 0x70,
	0xad, 0xf5, 0xbe, 0xb1, 0xdf, 0x1c, 0xb5, 0x0e, 0xf5, 0xb7, 0x91, 0xe5, 0x4f, 0x55, 0x84, 0xfc,
	0x08, 0x8d, 0x30, 0xc2, 0x38, 0x4e, 0x22, 0xb4, 0xea, 0x1a, 0x05, 0x29, 0x4a, 0xcd, 0x8f, 0xe6,
	0x31, 0xf2, 0x1b, 0xc0, 0xc4, 0x13, 0x89, 0xc3, 0x03, 0x8c, 0x63, 0xab, 0xb1, 0x4a, 0xaf, 0x00,
	0x20, 0x03, 0x68, 0xcd, 0x78, 0xe0, 0x9c, 0xf1, 0x08, 0x27, 0xea, 0x6b, 0xb3, 0x4c, 0xcd, 0x30,
	0x53, 0xc6, 0x19, 0xba, 0x74, 0x39, 0x4e, 0xfe, 0x82, 0x8e, 0x83, 0xb3, 0x50, 0xf0, 0x40, 0x5e,
	0xa1, 0x1f, 0x62, 0xc4, 0xa4, 0x4a, 0x09, 0x4a, 0x29, 0xad, 0x82, 0x91, 0x9f, 0xa0, 0xa1, 0xe4,
	0xfe, 0x49, 0x62, 0x69, 0x35, 0x35, 0xa5, 0x99, 0x52, 0xf4, 0x67, 0x40, 0xf3, 0xa0, 0x2a, 0x77,
	0x9a, 0xf8, 0xdc, 0xe1, 0xf2, 0xde, 0xda, 0x28, 0x97, 0x3b, 0x8f, 0x91, 0x63, 0x68, 0xb3, 0x08,
	0xd9, 0x7f, 0xec, 0xe5, 0x35, 0x0f, 0x1c, 0xad, 0x62, 0xb5, 0xca, 0xc2, 0x25, 0x10, 0xf9, 0x19,
	0xcc, 0x59, 0xce, 0xd8, 0x2c, 0x33, 0x16, 0x51, 0xf2, 0x2b, 0x34, 0x65, 0xa1, 0xd4, 0xad, 0x52,
	0x3a, 0xc5, 0x30, 0xf9, 0x05, 0x4c, 0x4f, 0xcc, 0x4e, 0x55, 0x8b, 0x63, 0xab, 0xbd, 0xaa, 0xff,
	0x8b, 0x38, 0x19, 0xc2, 0x86, 0x8f, 0x0e, 0x4f, 0xfc, 0x0c, 0xbf, 0xbd, 0x0a, 0xbf, 0x04, 0x51,
	0x03, 0x9e, 0x72, 0x77, 0x9a, 0x11, 0xc8, 0xca, 0x01, 0x2f, 0x00, 0xe4, 0x04, 0x76, 0x0b, 0xd9,
	0x5d, 0x44, 0x62, 0xcc, 0xc6, 0xdc, 0x53, 0x6d, 0xed, 0x94, 0xea, 0x78, 0x02, 0x49, 0x7e, 0x87,
	0x2d, 0xd5, 0x8d, 0x22, 0x79, 0xa7, 0x44, 0x7e, 0x0c, 0x21, 0x07, 0xd0, 0x4e, 0x42, 0x87, 0x49,
	0x74, 0xae, 0xf2, 0x05, 0xb4, 0xab, 0x1f, 0x4c, 0xc9, 0x6f, 0xbf, 0x82, 0x4e, 0xf6, 0xee, 0x28,
	0xc6, 0xa1, 0x08, 0x62, 0x3c, 0x97, 0xe8, 0x93, 0x21, 0x34, 0x3c, 0x31, 0xd1, 0x6b, 0x50, 0xbf,
	0xbe, 0xe6, 0xe8, 0xdb, 0xf4, 0xc6, 0x47, 0x9b, 0x90, 0xe6, 0x30, 0x32, 0x84, 0xfa, 0x2c, 0x0d,
	0xea, 0xd7, 0xd9, 0x1c, 0x7d, 0x57, 0x66, 0xe8, 0x67, 0x4d, 0xe7, 0x38, 0xfb, 0x14, 0x36, 0xfe,
	0x4f, 0x30, 0xba, 0xa7, 0x78, 0x9b, 0x60, 0x2c, 0xc9, 0x91, 0x9a, 0x60, 0x2a, 0x17, 0x5b, 0x46,
	0xbf, 0xfa, 0xf4, 0xb5, 0x0b, 0x9c, 0x3d, 0x86, 0x56, 0x26, 0x92, 0xe6, 0xaf, 0xb6, 0x8e, 0xc7,
	0x27, 0x18, 0xc4, 0xf3, 0xad, 0x36, 0x3f, 0x92, 0xe3, 0xa2, 0x7e, 0x45, 0xeb, 0x7f, 0xbf, 0xa4,
	0x5f, 0xec, 0x41, 0xe1, 0x8e, 0xd1, 0x15, 0xd4, 0x33, 0x04, 0x39, 0x87, 0x06, 0x0d, 0x27, 0xfa,
	0x46, 0x42, 0x52, 0x72, 0xb1, 0x86, 0x6e, 0x67, 0xc9, 0x97, 0xca, 0xd9, 0x3b, 0xaf, 0x3f, 0x7c,
	0x7e, 0x53, 0xd9, 0xb4, 0xcd, 0xc1, 0xdd, 0x70, 0x70, 0xab, 0x42, 0x7f, 0x18, 0x07, 0x27, 0xed,
	0x77, 0x0f, 0x3d, 0xe3, 0xfd, 0x43, 0xcf, 0xf8, 0xf8, 0xd0, 0x33, 0xde, 0x7e, 0xea, 0x7d, 0x33,
	0x5e, 0xd7, 0x7f, 0x9c, 0xa3, 0xaf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x7a, 0x23, 0xfa, 0xfb, 0xa3,
	0x06, 0x00, 0x00,
}
