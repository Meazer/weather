// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: spec.proto

/*
	Package spec is a generated protocol buffer package.

	It is generated from these files:
		spec.proto

	It has these top-level messages:
		WeatherStoreKey
		WeatherStoreValue
		WeatherResponseItem
		QueryRequest
		QueryResponse
		ExtremeResponse
		Empty
		BatchRequest
*/
package spec

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type WeatherStoreKey struct {
	Timestamp uint32  `protobuf:"fixed32,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Lat       float32 `protobuf:"fixed32,2,opt,name=lat,proto3" json:"lat,omitempty"`
	Lng       float32 `protobuf:"fixed32,3,opt,name=lng,proto3" json:"lng,omitempty"`
}

func (m *WeatherStoreKey) Reset()                    { *m = WeatherStoreKey{} }
func (m *WeatherStoreKey) String() string            { return proto.CompactTextString(m) }
func (*WeatherStoreKey) ProtoMessage()               {}
func (*WeatherStoreKey) Descriptor() ([]byte, []int) { return fileDescriptorSpec, []int{0} }

func (m *WeatherStoreKey) GetTimestamp() uint32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *WeatherStoreKey) GetLat() float32 {
	if m != nil {
		return m.Lat
	}
	return 0
}

func (m *WeatherStoreKey) GetLng() float32 {
	if m != nil {
		return m.Lng
	}
	return 0
}

type WeatherStoreValue struct {
	From                   uint32  `protobuf:"fixed32,1,opt,name=from,proto3" json:"from,omitempty"`
	To                     uint32  `protobuf:"fixed32,2,opt,name=to,proto3" json:"to,omitempty"`
	Altitude               float32 `protobuf:"fixed32,5,opt,name=altitude,proto3" json:"altitude,omitempty"`
	FogPercent             float32 `protobuf:"fixed32,6,opt,name=fogPercent,proto3" json:"fogPercent,omitempty"`
	PressureHPA            float32 `protobuf:"fixed32,7,opt,name=pressureHPA,proto3" json:"pressureHPA,omitempty"`
	CloudinessPercent      float32 `protobuf:"fixed32,8,opt,name=cloudinessPercent,proto3" json:"cloudinessPercent,omitempty"`
	WindDirectionDeg       float32 `protobuf:"fixed32,9,opt,name=windDirectionDeg,proto3" json:"windDirectionDeg,omitempty"`
	DewpointTemperatureC   float32 `protobuf:"fixed32,10,opt,name=dewpointTemperatureC,proto3" json:"dewpointTemperatureC,omitempty"`
	WindGustMps            float32 `protobuf:"fixed32,11,opt,name=windGustMps,proto3" json:"windGustMps,omitempty"`
	HumidityPercent        float32 `protobuf:"fixed32,12,opt,name=humidityPercent,proto3" json:"humidityPercent,omitempty"`
	AreaMaxWindSpeedMps    float32 `protobuf:"fixed32,13,opt,name=areaMaxWindSpeedMps,proto3" json:"areaMaxWindSpeedMps,omitempty"`
	WindSpeedMps           float32 `protobuf:"fixed32,14,opt,name=windSpeedMps,proto3" json:"windSpeedMps,omitempty"`
	TemperatureC           float32 `protobuf:"fixed32,15,opt,name=temperatureC,proto3" json:"temperatureC,omitempty"`
	LowCloudsPercent       float32 `protobuf:"fixed32,16,opt,name=lowCloudsPercent,proto3" json:"lowCloudsPercent,omitempty"`
	MediumCloudsPercent    float32 `protobuf:"fixed32,17,opt,name=mediumCloudsPercent,proto3" json:"mediumCloudsPercent,omitempty"`
	HighCloudsPercent      float32 `protobuf:"fixed32,18,opt,name=highCloudsPercent,proto3" json:"highCloudsPercent,omitempty"`
	TemperatureProbability float32 `protobuf:"fixed32,19,opt,name=temperatureProbability,proto3" json:"temperatureProbability,omitempty"`
	WindProbability        float32 `protobuf:"fixed32,20,opt,name=windProbability,proto3" json:"windProbability,omitempty"`
	UpdatedTimestamp       uint32  `protobuf:"fixed32,22,opt,name=updatedTimestamp,proto3" json:"updatedTimestamp,omitempty"`
}

func (m *WeatherStoreValue) Reset()                    { *m = WeatherStoreValue{} }
func (m *WeatherStoreValue) String() string            { return proto.CompactTextString(m) }
func (*WeatherStoreValue) ProtoMessage()               {}
func (*WeatherStoreValue) Descriptor() ([]byte, []int) { return fileDescriptorSpec, []int{1} }

func (m *WeatherStoreValue) GetFrom() uint32 {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *WeatherStoreValue) GetTo() uint32 {
	if m != nil {
		return m.To
	}
	return 0
}

func (m *WeatherStoreValue) GetAltitude() float32 {
	if m != nil {
		return m.Altitude
	}
	return 0
}

func (m *WeatherStoreValue) GetFogPercent() float32 {
	if m != nil {
		return m.FogPercent
	}
	return 0
}

func (m *WeatherStoreValue) GetPressureHPA() float32 {
	if m != nil {
		return m.PressureHPA
	}
	return 0
}

func (m *WeatherStoreValue) GetCloudinessPercent() float32 {
	if m != nil {
		return m.CloudinessPercent
	}
	return 0
}

func (m *WeatherStoreValue) GetWindDirectionDeg() float32 {
	if m != nil {
		return m.WindDirectionDeg
	}
	return 0
}

func (m *WeatherStoreValue) GetDewpointTemperatureC() float32 {
	if m != nil {
		return m.DewpointTemperatureC
	}
	return 0
}

func (m *WeatherStoreValue) GetWindGustMps() float32 {
	if m != nil {
		return m.WindGustMps
	}
	return 0
}

func (m *WeatherStoreValue) GetHumidityPercent() float32 {
	if m != nil {
		return m.HumidityPercent
	}
	return 0
}

func (m *WeatherStoreValue) GetAreaMaxWindSpeedMps() float32 {
	if m != nil {
		return m.AreaMaxWindSpeedMps
	}
	return 0
}

func (m *WeatherStoreValue) GetWindSpeedMps() float32 {
	if m != nil {
		return m.WindSpeedMps
	}
	return 0
}

func (m *WeatherStoreValue) GetTemperatureC() float32 {
	if m != nil {
		return m.TemperatureC
	}
	return 0
}

func (m *WeatherStoreValue) GetLowCloudsPercent() float32 {
	if m != nil {
		return m.LowCloudsPercent
	}
	return 0
}

func (m *WeatherStoreValue) GetMediumCloudsPercent() float32 {
	if m != nil {
		return m.MediumCloudsPercent
	}
	return 0
}

func (m *WeatherStoreValue) GetHighCloudsPercent() float32 {
	if m != nil {
		return m.HighCloudsPercent
	}
	return 0
}

func (m *WeatherStoreValue) GetTemperatureProbability() float32 {
	if m != nil {
		return m.TemperatureProbability
	}
	return 0
}

func (m *WeatherStoreValue) GetWindProbability() float32 {
	if m != nil {
		return m.WindProbability
	}
	return 0
}

func (m *WeatherStoreValue) GetUpdatedTimestamp() uint32 {
	if m != nil {
		return m.UpdatedTimestamp
	}
	return 0
}

type WeatherResponseItem struct {
	Location *WeatherStoreKey   `protobuf:"bytes,1,opt,name=location" json:"location,omitempty"`
	Weather  *WeatherStoreValue `protobuf:"bytes,2,opt,name=weather" json:"weather,omitempty"`
}

func (m *WeatherResponseItem) Reset()                    { *m = WeatherResponseItem{} }
func (m *WeatherResponseItem) String() string            { return proto.CompactTextString(m) }
func (*WeatherResponseItem) ProtoMessage()               {}
func (*WeatherResponseItem) Descriptor() ([]byte, []int) { return fileDescriptorSpec, []int{2} }

func (m *WeatherResponseItem) GetLocation() *WeatherStoreKey {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *WeatherResponseItem) GetWeather() *WeatherStoreValue {
	if m != nil {
		return m.Weather
	}
	return nil
}

type QueryRequest struct {
	Locations []*WeatherStoreKey `protobuf:"bytes,1,rep,name=locations" json:"locations,omitempty"`
}

func (m *QueryRequest) Reset()                    { *m = QueryRequest{} }
func (m *QueryRequest) String() string            { return proto.CompactTextString(m) }
func (*QueryRequest) ProtoMessage()               {}
func (*QueryRequest) Descriptor() ([]byte, []int) { return fileDescriptorSpec, []int{3} }

func (m *QueryRequest) GetLocations() []*WeatherStoreKey {
	if m != nil {
		return m.Locations
	}
	return nil
}

type QueryResponse struct {
	Locations []*WeatherResponseItem `protobuf:"bytes,2,rep,name=locations" json:"locations,omitempty"`
	License   string                 `protobuf:"bytes,1,opt,name=license,proto3" json:"license,omitempty"`
}

func (m *QueryResponse) Reset()                    { *m = QueryResponse{} }
func (m *QueryResponse) String() string            { return proto.CompactTextString(m) }
func (*QueryResponse) ProtoMessage()               {}
func (*QueryResponse) Descriptor() ([]byte, []int) { return fileDescriptorSpec, []int{4} }

func (m *QueryResponse) GetLocations() []*WeatherResponseItem {
	if m != nil {
		return m.Locations
	}
	return nil
}

func (m *QueryResponse) GetLicense() string {
	if m != nil {
		return m.License
	}
	return ""
}

type ExtremeResponse struct {
	Coldest *WeatherResponseItem `protobuf:"bytes,1,opt,name=coldest" json:"coldest,omitempty"`
	Hottest *WeatherResponseItem `protobuf:"bytes,2,opt,name=hottest" json:"hottest,omitempty"`
}

func (m *ExtremeResponse) Reset()                    { *m = ExtremeResponse{} }
func (m *ExtremeResponse) String() string            { return proto.CompactTextString(m) }
func (*ExtremeResponse) ProtoMessage()               {}
func (*ExtremeResponse) Descriptor() ([]byte, []int) { return fileDescriptorSpec, []int{5} }

func (m *ExtremeResponse) GetColdest() *WeatherResponseItem {
	if m != nil {
		return m.Coldest
	}
	return nil
}

func (m *ExtremeResponse) GetHottest() *WeatherResponseItem {
	if m != nil {
		return m.Hottest
	}
	return nil
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptorSpec, []int{6} }

type BatchRequest struct {
	Timestamp uint32 `protobuf:"fixed32,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (m *BatchRequest) Reset()                    { *m = BatchRequest{} }
func (m *BatchRequest) String() string            { return proto.CompactTextString(m) }
func (*BatchRequest) ProtoMessage()               {}
func (*BatchRequest) Descriptor() ([]byte, []int) { return fileDescriptorSpec, []int{7} }

func (m *BatchRequest) GetTimestamp() uint32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func init() {
	proto.RegisterType((*WeatherStoreKey)(nil), "spec.WeatherStoreKey")
	proto.RegisterType((*WeatherStoreValue)(nil), "spec.WeatherStoreValue")
	proto.RegisterType((*WeatherResponseItem)(nil), "spec.WeatherResponseItem")
	proto.RegisterType((*QueryRequest)(nil), "spec.QueryRequest")
	proto.RegisterType((*QueryResponse)(nil), "spec.QueryResponse")
	proto.RegisterType((*ExtremeResponse)(nil), "spec.ExtremeResponse")
	proto.RegisterType((*Empty)(nil), "spec.Empty")
	proto.RegisterType((*BatchRequest)(nil), "spec.BatchRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Weather service

type WeatherClient interface {
	RpcQuery(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error)
	RpcExtreme(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ExtremeResponse, error)
	RpcBatch(ctx context.Context, in *BatchRequest, opts ...grpc.CallOption) (Weather_RpcBatchClient, error)
}

type weatherClient struct {
	cc *grpc.ClientConn
}

func NewWeatherClient(cc *grpc.ClientConn) WeatherClient {
	return &weatherClient{cc}
}

func (c *weatherClient) RpcQuery(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error) {
	out := new(QueryResponse)
	err := grpc.Invoke(ctx, "/spec.Weather/RpcQuery", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weatherClient) RpcExtreme(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ExtremeResponse, error) {
	out := new(ExtremeResponse)
	err := grpc.Invoke(ctx, "/spec.Weather/RpcExtreme", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weatherClient) RpcBatch(ctx context.Context, in *BatchRequest, opts ...grpc.CallOption) (Weather_RpcBatchClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Weather_serviceDesc.Streams[0], c.cc, "/spec.Weather/RpcBatch", opts...)
	if err != nil {
		return nil, err
	}
	x := &weatherRpcBatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Weather_RpcBatchClient interface {
	Recv() (*WeatherResponseItem, error)
	grpc.ClientStream
}

type weatherRpcBatchClient struct {
	grpc.ClientStream
}

func (x *weatherRpcBatchClient) Recv() (*WeatherResponseItem, error) {
	m := new(WeatherResponseItem)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Weather service

type WeatherServer interface {
	RpcQuery(context.Context, *QueryRequest) (*QueryResponse, error)
	RpcExtreme(context.Context, *Empty) (*ExtremeResponse, error)
	RpcBatch(*BatchRequest, Weather_RpcBatchServer) error
}

func RegisterWeatherServer(s *grpc.Server, srv WeatherServer) {
	s.RegisterService(&_Weather_serviceDesc, srv)
}

func _Weather_RpcQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeatherServer).RpcQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spec.Weather/RpcQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeatherServer).RpcQuery(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Weather_RpcExtreme_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeatherServer).RpcExtreme(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spec.Weather/RpcExtreme",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeatherServer).RpcExtreme(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Weather_RpcBatch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BatchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WeatherServer).RpcBatch(m, &weatherRpcBatchServer{stream})
}

type Weather_RpcBatchServer interface {
	Send(*WeatherResponseItem) error
	grpc.ServerStream
}

type weatherRpcBatchServer struct {
	grpc.ServerStream
}

func (x *weatherRpcBatchServer) Send(m *WeatherResponseItem) error {
	return x.ServerStream.SendMsg(m)
}

var _Weather_serviceDesc = grpc.ServiceDesc{
	ServiceName: "spec.Weather",
	HandlerType: (*WeatherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RpcQuery",
			Handler:    _Weather_RpcQuery_Handler,
		},
		{
			MethodName: "RpcExtreme",
			Handler:    _Weather_RpcExtreme_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RpcBatch",
			Handler:       _Weather_RpcBatch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "spec.proto",
}

func (m *WeatherStoreKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WeatherStoreKey) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Timestamp != 0 {
		dAtA[i] = 0xd
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.Timestamp))
		i += 4
	}
	if m.Lat != 0 {
		dAtA[i] = 0x15
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Lat))))
		i += 4
	}
	if m.Lng != 0 {
		dAtA[i] = 0x1d
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Lng))))
		i += 4
	}
	return i, nil
}

func (m *WeatherStoreValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WeatherStoreValue) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.From != 0 {
		dAtA[i] = 0xd
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.From))
		i += 4
	}
	if m.To != 0 {
		dAtA[i] = 0x15
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.To))
		i += 4
	}
	if m.Altitude != 0 {
		dAtA[i] = 0x2d
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Altitude))))
		i += 4
	}
	if m.FogPercent != 0 {
		dAtA[i] = 0x35
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.FogPercent))))
		i += 4
	}
	if m.PressureHPA != 0 {
		dAtA[i] = 0x3d
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.PressureHPA))))
		i += 4
	}
	if m.CloudinessPercent != 0 {
		dAtA[i] = 0x45
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.CloudinessPercent))))
		i += 4
	}
	if m.WindDirectionDeg != 0 {
		dAtA[i] = 0x4d
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.WindDirectionDeg))))
		i += 4
	}
	if m.DewpointTemperatureC != 0 {
		dAtA[i] = 0x55
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.DewpointTemperatureC))))
		i += 4
	}
	if m.WindGustMps != 0 {
		dAtA[i] = 0x5d
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.WindGustMps))))
		i += 4
	}
	if m.HumidityPercent != 0 {
		dAtA[i] = 0x65
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.HumidityPercent))))
		i += 4
	}
	if m.AreaMaxWindSpeedMps != 0 {
		dAtA[i] = 0x6d
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.AreaMaxWindSpeedMps))))
		i += 4
	}
	if m.WindSpeedMps != 0 {
		dAtA[i] = 0x75
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.WindSpeedMps))))
		i += 4
	}
	if m.TemperatureC != 0 {
		dAtA[i] = 0x7d
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.TemperatureC))))
		i += 4
	}
	if m.LowCloudsPercent != 0 {
		dAtA[i] = 0x85
		i++
		dAtA[i] = 0x1
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.LowCloudsPercent))))
		i += 4
	}
	if m.MediumCloudsPercent != 0 {
		dAtA[i] = 0x8d
		i++
		dAtA[i] = 0x1
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.MediumCloudsPercent))))
		i += 4
	}
	if m.HighCloudsPercent != 0 {
		dAtA[i] = 0x95
		i++
		dAtA[i] = 0x1
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.HighCloudsPercent))))
		i += 4
	}
	if m.TemperatureProbability != 0 {
		dAtA[i] = 0x9d
		i++
		dAtA[i] = 0x1
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.TemperatureProbability))))
		i += 4
	}
	if m.WindProbability != 0 {
		dAtA[i] = 0xa5
		i++
		dAtA[i] = 0x1
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.WindProbability))))
		i += 4
	}
	if m.UpdatedTimestamp != 0 {
		dAtA[i] = 0xb5
		i++
		dAtA[i] = 0x1
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.UpdatedTimestamp))
		i += 4
	}
	return i, nil
}

func (m *WeatherResponseItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WeatherResponseItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Location != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSpec(dAtA, i, uint64(m.Location.Size()))
		n1, err := m.Location.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Weather != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSpec(dAtA, i, uint64(m.Weather.Size()))
		n2, err := m.Weather.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *QueryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Locations) > 0 {
		for _, msg := range m.Locations {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSpec(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *QueryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.License) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSpec(dAtA, i, uint64(len(m.License)))
		i += copy(dAtA[i:], m.License)
	}
	if len(m.Locations) > 0 {
		for _, msg := range m.Locations {
			dAtA[i] = 0x12
			i++
			i = encodeVarintSpec(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ExtremeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExtremeResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Coldest != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSpec(dAtA, i, uint64(m.Coldest.Size()))
		n3, err := m.Coldest.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Hottest != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSpec(dAtA, i, uint64(m.Hottest.Size()))
		n4, err := m.Hottest.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *Empty) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Empty) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *BatchRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Timestamp != 0 {
		dAtA[i] = 0xd
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.Timestamp))
		i += 4
	}
	return i, nil
}

func encodeVarintSpec(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *WeatherStoreKey) Size() (n int) {
	var l int
	_ = l
	if m.Timestamp != 0 {
		n += 5
	}
	if m.Lat != 0 {
		n += 5
	}
	if m.Lng != 0 {
		n += 5
	}
	return n
}

func (m *WeatherStoreValue) Size() (n int) {
	var l int
	_ = l
	if m.From != 0 {
		n += 5
	}
	if m.To != 0 {
		n += 5
	}
	if m.Altitude != 0 {
		n += 5
	}
	if m.FogPercent != 0 {
		n += 5
	}
	if m.PressureHPA != 0 {
		n += 5
	}
	if m.CloudinessPercent != 0 {
		n += 5
	}
	if m.WindDirectionDeg != 0 {
		n += 5
	}
	if m.DewpointTemperatureC != 0 {
		n += 5
	}
	if m.WindGustMps != 0 {
		n += 5
	}
	if m.HumidityPercent != 0 {
		n += 5
	}
	if m.AreaMaxWindSpeedMps != 0 {
		n += 5
	}
	if m.WindSpeedMps != 0 {
		n += 5
	}
	if m.TemperatureC != 0 {
		n += 5
	}
	if m.LowCloudsPercent != 0 {
		n += 6
	}
	if m.MediumCloudsPercent != 0 {
		n += 6
	}
	if m.HighCloudsPercent != 0 {
		n += 6
	}
	if m.TemperatureProbability != 0 {
		n += 6
	}
	if m.WindProbability != 0 {
		n += 6
	}
	if m.UpdatedTimestamp != 0 {
		n += 6
	}
	return n
}

func (m *WeatherResponseItem) Size() (n int) {
	var l int
	_ = l
	if m.Location != nil {
		l = m.Location.Size()
		n += 1 + l + sovSpec(uint64(l))
	}
	if m.Weather != nil {
		l = m.Weather.Size()
		n += 1 + l + sovSpec(uint64(l))
	}
	return n
}

func (m *QueryRequest) Size() (n int) {
	var l int
	_ = l
	if len(m.Locations) > 0 {
		for _, e := range m.Locations {
			l = e.Size()
			n += 1 + l + sovSpec(uint64(l))
		}
	}
	return n
}

func (m *QueryResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.License)
	if l > 0 {
		n += 1 + l + sovSpec(uint64(l))
	}
	if len(m.Locations) > 0 {
		for _, e := range m.Locations {
			l = e.Size()
			n += 1 + l + sovSpec(uint64(l))
		}
	}
	return n
}

func (m *ExtremeResponse) Size() (n int) {
	var l int
	_ = l
	if m.Coldest != nil {
		l = m.Coldest.Size()
		n += 1 + l + sovSpec(uint64(l))
	}
	if m.Hottest != nil {
		l = m.Hottest.Size()
		n += 1 + l + sovSpec(uint64(l))
	}
	return n
}

func (m *Empty) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *BatchRequest) Size() (n int) {
	var l int
	_ = l
	if m.Timestamp != 0 {
		n += 5
	}
	return n
}

func sovSpec(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSpec(x uint64) (n int) {
	return sovSpec(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *WeatherStoreKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WeatherStoreKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WeatherStoreKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.Timestamp = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lat", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Lat = float32(math.Float32frombits(v))
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lng", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Lng = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipSpec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WeatherStoreValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WeatherStoreValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WeatherStoreValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			m.From = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.From = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			m.To = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.To = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Altitude", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Altitude = float32(math.Float32frombits(v))
		case 6:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field FogPercent", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.FogPercent = float32(math.Float32frombits(v))
		case 7:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field PressureHPA", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.PressureHPA = float32(math.Float32frombits(v))
		case 8:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloudinessPercent", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.CloudinessPercent = float32(math.Float32frombits(v))
		case 9:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field WindDirectionDeg", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.WindDirectionDeg = float32(math.Float32frombits(v))
		case 10:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field DewpointTemperatureC", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.DewpointTemperatureC = float32(math.Float32frombits(v))
		case 11:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field WindGustMps", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.WindGustMps = float32(math.Float32frombits(v))
		case 12:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field HumidityPercent", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.HumidityPercent = float32(math.Float32frombits(v))
		case 13:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaMaxWindSpeedMps", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.AreaMaxWindSpeedMps = float32(math.Float32frombits(v))
		case 14:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field WindSpeedMps", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.WindSpeedMps = float32(math.Float32frombits(v))
		case 15:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field TemperatureC", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.TemperatureC = float32(math.Float32frombits(v))
		case 16:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field LowCloudsPercent", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.LowCloudsPercent = float32(math.Float32frombits(v))
		case 17:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field MediumCloudsPercent", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.MediumCloudsPercent = float32(math.Float32frombits(v))
		case 18:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field HighCloudsPercent", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.HighCloudsPercent = float32(math.Float32frombits(v))
		case 19:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field TemperatureProbability", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.TemperatureProbability = float32(math.Float32frombits(v))
		case 20:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field WindProbability", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.WindProbability = float32(math.Float32frombits(v))
		case 22:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedTimestamp", wireType)
			}
			m.UpdatedTimestamp = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdatedTimestamp = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		default:
			iNdEx = preIndex
			skippy, err := skipSpec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WeatherResponseItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WeatherResponseItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WeatherResponseItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Location == nil {
				m.Location = &WeatherStoreKey{}
			}
			if err := m.Location.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weather", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Weather == nil {
				m.Weather = &WeatherStoreValue{}
			}
			if err := m.Weather.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Locations = append(m.Locations, &WeatherStoreKey{})
			if err := m.Locations[len(m.Locations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field License", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.License = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Locations = append(m.Locations, &WeatherResponseItem{})
			if err := m.Locations[len(m.Locations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExtremeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExtremeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExtremeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coldest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Coldest == nil {
				m.Coldest = &WeatherResponseItem{}
			}
			if err := m.Coldest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hottest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Hottest == nil {
				m.Hottest = &WeatherResponseItem{}
			}
			if err := m.Hottest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Empty) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Empty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Empty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSpec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.Timestamp = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		default:
			iNdEx = preIndex
			skippy, err := skipSpec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSpec(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSpec
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSpec
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSpec
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSpec(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSpec = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSpec   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("spec.proto", fileDescriptorSpec) }

var fileDescriptorSpec = []byte{
	// 742 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x55, 0xcb, 0x4e, 0xe3, 0x48,
	0x14, 0x1d, 0x87, 0x87, 0x93, 0x9b, 0x40, 0x42, 0x85, 0x61, 0x3c, 0x11, 0x8a, 0x22, 0xaf, 0x10,
	0x42, 0x04, 0x82, 0x34, 0x23, 0xb1, 0x1b, 0x1e, 0x1a, 0xd0, 0x08, 0x09, 0x0c, 0x1a, 0xd6, 0x15,
	0xfb, 0x92, 0x94, 0x64, 0xbb, 0x8c, 0xab, 0x3c, 0x21, 0x62, 0x37, 0xfd, 0x09, 0xbd, 0xe9, 0x4f,
	0xea, 0x65, 0x4b, 0xfd, 0x03, 0x2d, 0xba, 0x7f, 0xa0, 0xff, 0xa0, 0x55, 0x65, 0x3b, 0x38, 0x09,
	0xd0, 0xbb, 0xf2, 0xb9, 0xe7, 0x9e, 0x3a, 0xf7, 0x14, 0x97, 0x00, 0x88, 0x08, 0xdd, 0xdd, 0x28,
	0xe6, 0x92, 0x93, 0x45, 0x75, 0x6e, 0x6d, 0x0e, 0x38, 0x1f, 0xf8, 0xd8, 0xa5, 0x11, 0xeb, 0xd2,
	0x30, 0xe4, 0x92, 0x4a, 0xc6, 0x43, 0x91, 0x72, 0xec, 0x6b, 0xa8, 0xdf, 0x22, 0x95, 0x43, 0x8c,
	0xaf, 0x25, 0x8f, 0xf1, 0x1f, 0x1c, 0x93, 0x4d, 0xa8, 0x48, 0x16, 0xa0, 0x90, 0x34, 0x88, 0x2c,
	0xa3, 0x63, 0x6c, 0x99, 0xce, 0x33, 0x40, 0x1a, 0xb0, 0xe0, 0x53, 0x69, 0x95, 0x3a, 0xc6, 0x56,
	0xc9, 0x51, 0x47, 0x8d, 0x84, 0x03, 0x6b, 0x21, 0x43, 0xc2, 0x81, 0xfd, 0x6e, 0x19, 0xd6, 0x8a,
	0xaa, 0xff, 0x52, 0x3f, 0x41, 0x42, 0x60, 0xf1, 0x2e, 0xe6, 0x41, 0x26, 0xa9, 0xcf, 0x64, 0x15,
	0x4a, 0x92, 0x6b, 0x31, 0xd3, 0x29, 0x49, 0x4e, 0x5a, 0x50, 0xa6, 0xbe, 0x64, 0x32, 0xf1, 0xd0,
	0x5a, 0xd2, 0x82, 0x93, 0x6f, 0xd2, 0x06, 0xb8, 0xe3, 0x83, 0x4b, 0x8c, 0x5d, 0x0c, 0xa5, 0xb5,
	0xac, 0xab, 0x05, 0x84, 0x74, 0xa0, 0x1a, 0xc5, 0x28, 0x44, 0x12, 0xe3, 0xd9, 0xe5, 0x5f, 0x96,
	0xa9, 0x09, 0x45, 0x88, 0xec, 0xc0, 0x9a, 0xeb, 0xf3, 0xc4, 0x63, 0x21, 0x0a, 0x91, 0x0b, 0x95,
	0x35, 0x6f, 0xbe, 0x40, 0xb6, 0xa1, 0x31, 0x62, 0xa1, 0x77, 0xc2, 0x62, 0x74, 0x55, 0x64, 0x27,
	0x38, 0xb0, 0x2a, 0x9a, 0x3c, 0x87, 0x93, 0x1e, 0xac, 0x7b, 0x38, 0x8a, 0x38, 0x0b, 0xe5, 0x0d,
	0x06, 0x11, 0xc6, 0x54, 0x26, 0x31, 0x1e, 0x5b, 0xa0, 0xf9, 0x2f, 0xd6, 0x94, 0x5f, 0xa5, 0xf3,
	0x77, 0x22, 0xe4, 0x45, 0x24, 0xac, 0x6a, 0xea, 0xb7, 0x00, 0x91, 0x2d, 0xa8, 0x0f, 0x93, 0x80,
	0x79, 0x4c, 0x8e, 0x73, 0xb7, 0x35, 0xcd, 0x9a, 0x85, 0xc9, 0x1e, 0x34, 0x69, 0x8c, 0xf4, 0x82,
	0x3e, 0xdc, 0xb2, 0xd0, 0xbb, 0x8e, 0x10, 0x3d, 0xa5, 0xb9, 0xa2, 0xd9, 0x2f, 0x95, 0x88, 0x0d,
	0xb5, 0x51, 0x91, 0xba, 0xaa, 0xa9, 0x53, 0x98, 0xe2, 0xc8, 0xe2, 0x34, 0xf5, 0x94, 0x53, 0xc4,
	0x54, 0x4a, 0x3e, 0x1f, 0x1d, 0xab, 0xf4, 0x26, 0x91, 0x36, 0xd2, 0x94, 0x66, 0x71, 0xe5, 0x32,
	0x40, 0x8f, 0x25, 0xc1, 0x34, 0x7d, 0x2d, 0x75, 0xf9, 0x42, 0x49, 0xbd, 0xd8, 0x90, 0x0d, 0x86,
	0xd3, 0x7c, 0x92, 0xbe, 0xd8, 0x5c, 0x81, 0xfc, 0x01, 0x1b, 0x05, 0x6f, 0x97, 0x31, 0xef, 0xd3,
	0x3e, 0xf3, 0x99, 0x1c, 0x5b, 0x4d, 0xdd, 0xf2, 0x4a, 0x55, 0xe5, 0xac, 0xe6, 0x2e, 0x36, 0xac,
	0xa7, 0x39, 0xcf, 0xc0, 0x6a, 0xda, 0x24, 0xf2, 0xa8, 0x44, 0xef, 0x66, 0xb2, 0x22, 0x1b, 0xfa,
	0xaf, 0x77, 0x0e, 0xb7, 0x1f, 0xa1, 0x99, 0x2d, 0x81, 0x83, 0x22, 0xe2, 0xa1, 0xc0, 0x73, 0x89,
	0x01, 0xd9, 0x87, 0xb2, 0xcf, 0x5d, 0xbd, 0x84, 0x7a, 0x15, 0xaa, 0xbd, 0x5f, 0x77, 0xf5, 0xd2,
	0xce, 0xec, 0xa1, 0x33, 0xa1, 0x91, 0x7d, 0x30, 0x47, 0x69, 0x51, 0xaf, 0x4a, 0xb5, 0xf7, 0xdb,
	0x7c, 0x87, 0xde, 0x31, 0x27, 0xe7, 0xd9, 0xc7, 0x50, 0xbb, 0x4a, 0x30, 0x1e, 0x3b, 0x78, 0x9f,
	0xa0, 0x90, 0xe4, 0x00, 0x2a, 0xb9, 0x9c, 0xb0, 0x8c, 0xce, 0xc2, 0xeb, 0xd7, 0x3e, 0xf3, 0xec,
	0x3e, 0xac, 0x64, 0x22, 0xa9, 0x7f, 0x62, 0x81, 0xe9, 0x33, 0x17, 0x43, 0x81, 0xda, 0x7a, 0xc5,
	0xc9, 0x3f, 0xc9, 0x9f, 0x45, 0xfd, 0x92, 0xd6, 0xff, 0x7d, 0x4a, 0xbf, 0x98, 0x41, 0xf1, 0x8e,
	0x47, 0xa8, 0x9f, 0x3e, 0xc8, 0x18, 0x03, 0x9c, 0xdc, 0x72, 0x00, 0xa6, 0xcb, 0x7d, 0x0f, 0x85,
	0xcc, 0x02, 0x7a, 0x43, 0x29, 0x67, 0xaa, 0xa6, 0x21, 0x97, 0x52, 0x35, 0x95, 0x7e, 0xda, 0x94,
	0x31, 0x6d, 0x13, 0x96, 0x4e, 0x83, 0x48, 0x8e, 0xed, 0x1d, 0xa8, 0x1d, 0x51, 0xe9, 0x0e, 0xf3,
	0xb8, 0xde, 0xfc, 0x1f, 0xd8, 0xfb, 0x6e, 0x80, 0x99, 0xe9, 0x92, 0x73, 0x28, 0x3b, 0x91, 0xab,
	0x63, 0x22, 0x24, 0xbd, 0xb2, 0x18, 0x7c, 0xab, 0x39, 0x85, 0xa5, 0x26, 0xec, 0xf5, 0xff, 0x3f,
	0x7f, 0x7b, 0x5f, 0x5a, 0xb5, 0x2b, 0xdd, 0xff, 0xf6, 0xbb, 0xf7, 0xaa, 0x74, 0x68, 0x6c, 0x93,
	0x33, 0x00, 0x27, 0x72, 0xb3, 0x34, 0x48, 0x35, 0x6d, 0xd4, 0xfe, 0x5a, 0xd9, 0x5b, 0xcd, 0x24,
	0x65, 0x6f, 0x68, 0x9d, 0x86, 0x5d, 0x55, 0x3a, 0x98, 0x16, 0x95, 0xd2, 0x95, 0x36, 0xa5, 0x27,
	0xca, 0x4d, 0x15, 0xc7, 0x6b, 0xbd, 0x9e, 0xcd, 0xb4, 0xb5, 0xbe, 0x6a, 0x3a, 0x34, 0xb6, 0xf7,
	0x8c, 0xa3, 0xc6, 0xc7, 0xa7, 0xb6, 0xf1, 0xe9, 0xa9, 0x6d, 0x7c, 0x79, 0x6a, 0x1b, 0x1f, 0xbe,
	0xb6, 0x7f, 0xe9, 0x2f, 0xeb, 0x5f, 0x90, 0x83, 0x1f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x50, 0xe8,
	0x6b, 0xd6, 0x73, 0x06, 0x00, 0x00,
}
